par(mai=rep(0.1,4))
plot(model)
text(model)
predict=predict(model,newtest[,2:dim(newtest)[1])
dim(newtest)
predict=predict(model,newtest[,2:dim(newtest)[2])
dim(newtest)[2]
predict=predict(model,newtest[,2:dim(newtest)[2])
pre=apply(predict,MARGIN = 1,FUN = which.max)
predict=predict(model,newtest[,2:dim(newtest)[2]])
pre=apply(predict,MARGIN = 1,FUN = which.max)
pre=pre-1
######正確率
sum(pre==test[,1])/length(test[,1])
datainput=function(max,goal){
data=c()
index1=c()
index2=c()
for (i in 0:9){
aa=paste(goal,i,"_",0:num[i+1],".txt",sep="")
bb=rep(i,num[i+1]+1)
cc=0:num[i+1]
index1=c(index1,bb)
index2=c(index2,cc)
data=c(data,aa)
}
#############製作所有目錄，並記錄檔案編號到index1 ,index2
xx=matrix(0,ncol=32*32+2,nrow=length(data))
for (i in 1:length(data)){
x=readLines(data[i])
x1=strsplit(x,split="")
x1=unlist(x1)
x1=as.numeric(x1)
xx[i,3:1026]=x1
}
xx[,1]=index1
xx[,2]=index2
return(xx)
}
##############xx 為第一行是編號0~9 第二行為第二個編號  第三行到第1026行是將該個資料的data 以數值存入
#########讀入資料
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
newtrain=train
newtest=test
newtrain[,1]=as.character(newtrain[,1])
newtest[,1]=as.character(newtest[,1])
library(rpart)
head(newtest)
newtrain=train[,-2]
newtest=test[,-2]
newtrain[,1]=as.character(newtrain[,1])
newtest[,1]=as.character(newtest[,1])
model=rpart(index1~.,data=newtrain)
newtrain=train[,-2]
newtest=test[,-2]
newtrain=as.data.frame(newtrain)
names(newtrain)=c("index1",paste("x",1:1024,sep=""))
newtrain[,1]=as.character(newtrain[,1])
model=rpart(index1~.,data=newtrain)
par(mai=rep(0.1,4))
plot(model)
text(model)
newtest=as.data.frame(newtest)
names(newtest)=c("index1",paste("x",1:1024,sep=""))
newtest[,1]=as.character(newtest[,1])
predict=predict(model,newtest[,2:dim(newtest)[2]])
pre=apply(predict,MARGIN = 1,FUN = which.max)
pre=pre-1
sum(pre==test[,1])/length(test[,1])
draw.tree(model)
install.packages("maptree")
library(maptree)
draw.tree(model)
num=rep(10,10)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
trans=function(max,data,newname,sp){
newname=matrix(0,ncol=sp+1,nrow=max)
newname[,1]=data[,1]
for (j in 1:max){
for (i in 1:sp){
newname[j,i+1]=sum(data[j,(32*32/sp*(i-1)+2):(32*32/sp*i+1)])
}
}
newname=as.data.frame(newname)
names(newname)=c("index1",paste("x",1:sp,sep=""))
return(newname)
}
newtrain=trans(1934,train,newtrain,32)
dim(test)
newtrain=trans(dim(train)[1],train,newtrain,32)
newtest=trans(dim(test)[1],test,newtest,32)
newtrain[,1]=as.character(newtrain[,1])
newtest[,1]=as.character(newtest[,1])
model=rpart(index1~.,data=newtrain)
par(mai=rep(0.1,4))
plot(model)
text(model)
predict=predict(model,newtest[,2:dim(newtest)[2]])
pre=apply(predict,MARGIN = 1,FUN = which.max)
pre=pre-1
######正確率
sum(pre==test[,1])/length(test[,1])
num=rep(10,10)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
newtrain=train[,-2]
newtest=test[,-2]
newtrain=as.data.frame(newtrain)
names(newtrain)=c("index1",paste("x",1:1024,sep=""))
newtest=as.data.frame(newtest)
names(newtest)=c("index1",paste("x",1:1024,sep=""))
newtrain[,1]=as.character(newtrain[,1])
newtest[,1]=as.character(newtest[,1])
model=rpart(index1~.,data=newtrain)
predict=predict(model,newtest[,2:dim(newtest)[2]])
pre=apply(predict,MARGIN = 1,FUN = which.max)
pre=pre-1
######正確率
sum(pre==test[,1])/length(test[,1])
num=rep(10,10)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
trans=function(max,data,newname,sp){
newname=matrix(0,ncol=sp+1,nrow=max)
newname[,1]=data[,1]
for (j in 1:max){
for (i in 1:sp){
newname[j,i+1]=sum(data[j,(32*32/sp*(i-1)+2):(32*32/sp*i+1)])
}
}
newname=as.data.frame(newname)
names(newname)=c("index1",paste("x",1:sp,sep=""))
return(newname)
}
newtrain=trans(dim(train)[1],train,newtrain,8)
newtest=trans(dim(test)[1],test,newtest,8)
newtrain[,1]=as.character(newtrain[,1])
newtest[,1]=as.character(newtest[,1])
model=rpart(index1~.,data=newtrain)
predict=predict(model,newtest[,2:dim(newtest)[2]])
pre=apply(predict,MARGIN = 1,FUN = which.max)
pre=pre-1
######正確率
sum(pre==test[,1])/length(test[,1])
library(maptree)
datainput=function(max,goal){
data=c()
index1=c()
index2=c()
for (i in 0:9){
aa=paste(goal,i,"_",0:num[i+1],".txt",sep="")
bb=rep(i,num[i+1]+1)
cc=0:num[i+1]
index1=c(index1,bb)
index2=c(index2,cc)
data=c(data,aa)
}
#############製作所有目錄，並記錄檔案編號到index1 ,index2
xx=matrix(0,ncol=32*32+2,nrow=length(data))
for (i in 1:length(data)){
x=readLines(data[i])
x1=strsplit(x,split="")
x1=unlist(x1)
x1=as.numeric(x1)
xx[i,3:1026]=x1
}
xx[,1]=index1
xx[,2]=index2
return(xx)
}
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\tsr\\Desktop\\程式\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\tsr\\Desktop\\程式\\testDigits\\")
datainput=function(max,goal){
data=c()
index1=c()
index2=c()
for (i in 0:9){
aa=paste(goal,i,"_",0:num[i+1],".txt",sep="")
bb=rep(i,num[i+1]+1)
cc=0:num[i+1]
index1=c(index1,bb)
index2=c(index2,cc)
data=c(data,aa)
}
#############製作所有目錄，並記錄檔案編號到index1 ,index2
xx=matrix(0,ncol=32*32+2,nrow=length(data))
for (i in 1:length(data)){
x=readLines(data[i])
x1=strsplit(x,split="")
x1=unlist(x1)
x1=as.numeric(x1)
xx[i,3:1026]=x1
}
xx[,1]=index1
xx[,2]=index2
return(xx)
}
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:dim(train)[2]])
}
head(train[,1:3])
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
test=test[,1:3]
}
library(rpart)
model=rpart(index1~.,data=newtrain)
library(maptree)
draw.tree(model)
names(train)=c("index1","index2","x")
library(rpart)
#####建立預測模型
model=rpart(index1~x,data=train)
head(train)
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:dim(train)[2]])
train=train[,1:3]
}
head(train)
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
test=test[,1:3]
}
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:dim(train)[2]])
train=as.data.frame(train[,1:3])
}
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
test=as.data.frame(test[,1:3])
}
names(train)=c("index1","index2","x")
library(rpart)
#####建立預測模型
model=rpart(index1~x,data=train)
draw.tree(model)
par(mai=rep(0.1,4))
plot(model)
text(model)
model=rpart(index1~x,data=train)
library(maptree)
draw.tree(model)
model=rpart(index1~x,data=train)
model
train
head(train)
model=rpart(index1~x,data=train)
par(mai=rep(0.1,4))
plot(model)
datainput=function(max,goal){
data=c()
index1=c()
index2=c()
for (i in 0:9){
aa=paste(goal,i,"_",0:num[i+1],".txt",sep="")
bb=rep(i,num[i+1]+1)
cc=0:num[i+1]
index1=c(index1,bb)
index2=c(index2,cc)
data=c(data,aa)
}
#############製作所有目錄，並記錄檔案編號到index1 ,index2
xx=matrix(0,ncol=32*32+2,nrow=length(data))
for (i in 1:length(data)){
x=readLines(data[i])
x1=strsplit(x,split="")
x1=unlist(x1)
x1=as.numeric(x1)
xx[i,3:1026]=x1
}
xx[,1]=index1
xx[,2]=index2
return(xx)
}
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:dim(train)[2]])
train=as.data.frame(train[,1:3])
}
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
test=as.data.frame(test[,1:3])
}
names(train)=c("index1","index2","x")
library(rpart)
model=rpart(index1~x,data=train)
par(mai=rep(0.1,4))
plot(model)
text(model)
library(maptree)
draw.tree(model)
model=rpart(index1~x,data=train)
model
train
datamean=c(mean(train[1:189,3]),mean(train[190:(188+197+2),3]))
datamean
train
datainput=function(max,goal){
data=c()
index1=c()
index2=c()
for (i in 0:9){
aa=paste(goal,i,"_",0:num[i+1],".txt",sep="")
bb=rep(i,num[i+1]+1)
cc=0:num[i+1]
index1=c(index1,bb)
index2=c(index2,cc)
data=c(data,aa)
}
#############製作所有目錄，並記錄檔案編號到index1 ,index2
xx=matrix(0,ncol=32*32+2,nrow=length(data))
for (i in 1:length(data)){
x=readLines(data[i])
x1=strsplit(x,split="")
x1=unlist(x1)
x1=as.numeric(x1)
xx[i,3:1026]=x1
}
xx[,1]=index1
xx[,2]=index2
return(xx)
}
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:dim(train)[2]])
train=as.data.frame(train[,1:3])
}
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
test=as.data.frame(test[,1:3])
}
names(train)=c("index1","index2","x")
names(test)=c("index1","index2","x")
datamean=c(mean(train[1:189,3]),mean(train[190:(188+197+2),3]))
datamean
head(train)
datainput=function(max,goal){
data=c()
index1=c()
index2=c()
for (i in 0:9){
aa=paste(goal,i,"_",0:num[i+1],".txt",sep="")
bb=rep(i,num[i+1]+1)
cc=0:num[i+1]
index1=c(index1,bb)
index2=c(index2,cc)
data=c(data,aa)
}
#############製作所有目錄，並記錄檔案編號到index1 ,index2
xx=matrix(0,ncol=32*32+2,nrow=length(data))
for (i in 1:length(data)){
x=readLines(data[i])
x1=strsplit(x,split="")
x1=unlist(x1)
x1=as.numeric(x1)
xx[i,3:1026]=x1
}
xx[,1]=index1
xx[,2]=index2
return(xx)
}
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:dim(train)[2]])
train=as.data.frame(train[,1:3])
}
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
test=as.data.frame(test[,1:3])
}
head(train)
dim(train)[1]
train=as.data.frame(train[,1:3])
head(train)
names(train)=c("index1","index2","x")
names(test)=c("index1","index2","x")
head(train)
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:(dim(train)[2])])
train=as.data.frame(train[,1:3])
}
head(train)
num=c(188,197,194,198,185,186,194,200,179,203)
train=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\trainingDigits\\")
num=c(86,96,91,84,113,107,86,95,90,88)
test=datainput(max=num,goal="C:\\Users\\TSR\\Desktop\\文字辨識\\testDigits\\")
head(train)
for (i in 1:dim(train)[1]){
train[i,3]=sum(train[i,3:(dim(train)[2])])
}
train=as.data.frame(train[,1:3])
for (i in 1:dim(test)[1]){
test[i,3]=sum(test[i,3:dim(test)[2]])
}
test=as.data.frame(test[,1:3])
names(train)=c("index1","index2","x")
names(test)=c("index1","index2","x")
datamean=c(mean(train[1:189,3]),mean(train[190:(188+197+2),3]))
head(train)
datamean
test=test[1:(86+96+2)]
test=test[1:(86+96+2),]
test
test[,4]=0
test[,4]=0
for (i in 1:dim(test)[1]){
if (abs(test[i,3]-datamean[2]) < abs(test[i,3]-datamean[1]) ){
test[i,4]=1
}
}
test
sum(test[,1]==test[,4])
sum(test[,1]==test[,4])/dim(test)[1]
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE,
mfinal=10)
install.packages("adabag")
library(adabag)
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE,
mfinal=10)
importanceplot(iris.adaboost)
sub <- c(sample(1:50, 25), sample(51:100, 25), sample(101:150, 25))
iris.bagging <- bagging(Species ~ ., data=iris[sub,], mfinal=10)
iris.predbagging<- predict.bagging(iris.bagging, newdata=iris[-sub,])
iris.bagging
iris.predbagging
iris.bagging
install.packages("e1071")
library(adabag)
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE,
mfinal=10)
importanceplot(iris.adaboost)
sub <- c(sample(1:50, 25), sample(51:100, 25), sample(101:150, 25))
iris.bagging <- bagging(Species ~ ., data=iris[sub,], mfinal=10)
iris.predbagging<- predict.bagging(iris.bagging, newdata=iris[-sub,])
iris.predbagging
library(TSA)
larain
x=matrix(0,ncol=5,nrow=6)
x
x[2,3]=NA
x[4,4]=NA
x[6,3]=NA
v=data.frame(x)
v
v$x1
v$X1
v[!is.na(v$X3),]
v
v[!is.na(v$X3),]
iris
iris1=iris
train=sample(iris1,100)
iris1=iris
train=sample(iris1,100)
iris1=iris
train=sample(iris1,100)
iris1
train=sample(1:150,100)
?predict
num=sample(1:150,100)
train=iris[num,]
test=iris[-num,]
library(e1071)
model=svm(Species~.,data=train)
pre=predict(model,test)
pre
table(pre,test)
table(pre,test$Species)
x=read.table(file="o:\\統計計算下\\heart.dat",head=T)
attach(x)
x$tpr1=map1/(hr1*sv1)
x$tpr2=map2/(hr2*sv2)
plot(~id+time+sv1+hr1+fbf1+map1)
plot(~id+time+sv1+hr1+fbf1+map1,data=x[id=="ht1",])
plot(~id+time+sv1+hr1+fbf1+map1)
plot(~id+time+sv1+hr1+fbf1+map1,main="fff")
plot(~id+time+sv1+hr1+fbf1+map1,main="time和所有變數的散佈圖")
plot(~id+time+sv1+hr1+fbf1+map1,data=x[id=="ht1",],main="ht1受測者的time和其餘變數散佈圖")
plot(~id+time+sv1+hr1+fbf1+map1,data=x[grep("ht",id),])
abline(h = 100)
line(h = 100)
?abline
abline(v = 100)
